import db_handler as dbh
import data_handler as dh

from aiogram.types import Message, CallbackQuery
from aiogram import types, F, Router
from aiogram.filters import Command, CommandObject, or_f


menu_work_db = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
@menu_work_db.message(F.text.contains("=") or F.data == 'work_menu')
async def check_login_pass(message: types.Message):
    try:
        user_id = message.from_user.id
        password = message.text.split('=')[1]

        print(f'{user_id} –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        print(f'{password} –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')

        result = dbh.register_new_user(user_id, password)
        
        if result != "–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç":

            add_info = '\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n‚úîÔ∏è\n + —Å—É–º–º–∞\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n<b>–∏–ª–∏</b>\n‚ùå\n - —Å—É–º–º–∞\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
            await message.answer(f"{result+add_info}", reply_markup=dh.make_work_menu())
        else:
            await message.answer(f"{result}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –û–±—Ä–∞–∑–µ—Ü: =–ø–∞—Ä–æ–ª—å")
    except ValueError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –û–±—Ä–∞–∑–µ—Ü: =–ø–∞—Ä–æ–ª—å")
        


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç +100.50\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@menu_work_db.message(F.text.contains("+"))
async def insert_to_db_income(message: types.Message):
    user_id = message.from_user.id
    summa, comment = message.text.split('\n')
    summa = float(summa.replace('+', '').replace(',', '.').replace(' ', ''))
    result = dbh.add_summa_to_db(user_id, summa, comment)
    await message.answer(f"{result}", reply_markup=dh.reply_workmenu())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç -100.50\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@menu_work_db.message(F.text.contains("-"))
async def insert_to_db_expense(message: types.Message):
    user_id = message.from_user.id
    summa, comment = message.text.split('\n')
    summa = float(summa.replace('-', '').replace(',', '.').replace(' ', ''))
    result = dbh.sub_summa_to_db(user_id, summa, comment)
    await message.answer(f"{result}", reply_markup=dh.reply_workmenu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@menu_work_db.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def reg_new_user(message: types.Message):
    await message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—éüìú', show_alert=True)
    kb = dh.make_work_menu()
    add_info = '\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n‚úîÔ∏è\n + —Å—É–º–º–∞\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n<b>–∏–ª–∏</b>\n‚ùå\n - —Å—É–º–º–∞\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
    await message.answer(add_info, reply_markup=kb)



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏, —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º–∞\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@menu_work_db.message(F.text.contains("%"))
async def add_new_fingoal(message: types.Message):
    print('–û—Ç—Ä–∞–±–æ—Ç–∞–ª –æ—Ç–ª–æ–≤ %')
    user_id = message.from_user.id
    fingoal = message.text.replace("%", "")
    result = dbh.add_new_fingoal(user_id, fingoal)
    await message.answer(f"{result}", reply_markup = dh.make_work_menu())



# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –§–æ—Ä–º–∞—Ç !—Å—É–º–º–∞\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@menu_work_db.message(F.text.contains("!"))
async def delete_trans_or_fingoal(message: types.Message):
    print('–û—Ç—Ä–∞–±–æ—Ç–∞–ª –æ—Ç–ª–æ–≤ !')
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    result = dbh.del_fingoal(user_id, message.text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª—å—é
    result = dbh.del_transaction(user_id, message.text)

    await message.answer(f"{result}", reply_markup = dh.make_work_menu())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–≤–∞ –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
@menu_work_db.message(F.text)
async def no_key_data_answer(message: types.Message):
    await message.answer("–ó–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤–æ–π —Å–∏–º–≤–æ–ª‚õî")